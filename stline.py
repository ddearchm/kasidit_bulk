# üì¶ IMPORT & CONFIG
import streamlit as st
import pandas as pd
import os, re
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from rapidfuzz import fuzz
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.datavalidation import DataValidation
from openpyxl.workbook.defined_name import DefinedName

st.set_page_config(page_title="Survey Column Builder", layout="wide")
st.title("üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° (Excel ‡πÅ‡∏•‡∏∞ PDF)")

# üéØ SETUP SESSION STATE
if "custom_questions" not in st.session_state:
    st.session_state.custom_questions = []
if "custom_product_details" not in st.session_state:
    st.session_state.custom_product_details = []

# üåü FUZZY MATCH
FUZZY_MATCH_THRESHOLD = 80

def clean_question(text):
    text = str(text).strip().lower()
    return re.sub(r"\d+$", "", text)

def find_q_group(base_question, sheets_data):
    """
    ‡∏Ñ‡∏á logic ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ: ‡∏´‡∏≤ group ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á business type ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (sheets_data)
    """
    base = clean_question(base_question)
    best_score, best_group = 0, "N/A"
    for df in sheets_data.values():
        if "standard_question_th" in df.columns and "q_group" in df.columns:
            df = df.copy()
            df["standard_clean"] = df["standard_question_th"].astype(str).apply(clean_question)
            for _, row in df.iterrows():
                ref_q = row["standard_clean"]
                score = max(fuzz.partial_ratio(base, ref_q), fuzz.token_sort_ratio(base, ref_q))
                if score > best_score and score >= FUZZY_MATCH_THRESHOLD:
                    best_score = score
                    best_group = str(row["q_group"])
    return best_group

# üîê ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate column names
seen_labels = set()
def generate_unique_label(base, i, qty):
    raw = f"{base}#{i}" if qty > 1 else base
    label = raw
    count = 2
    while label in seen_labels:
        label = f"{raw}#{count}"
        count += 1
    seen_labels.add(label)
    return label

# üß∞ QUESTION BANK (‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
# ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: QUESTION_BANK[BUSINESS_TYPE][SHEET_NAME] = list ‡∏Ç‡∏≠‡∏á dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ standard_question_th, q_group
# sheet name ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Excel ‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô "Respondent Profile", "Customer & Market", "Product List", "Product & Details"
QUESTION_BANK = {
    "Bulk transformer": {
        "Respondent Profile": [
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏û‡∏®", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏≠‡∏≤‡∏¢‡∏∏", "q_group": "Respondent Profile"},                        
            {"standard_question_th": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "q_group": "Respondent Profile"},
            {"standard_question_th": "Persona", "q_group": "Respondent Profile"},

        ],
        "Customer & Market": [
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏Ç‡∏≠‡∏á‡πÅ‡∏à‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà", "q_group": "Customer & Market"},

        ],
        "Business & Strategy": [
            {"standard_question_th": "Dealer", "q_group": "Business & Strategy"},
            {"standard_question_th": "BP Model", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô (detail)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ú‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ú‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏•‡∏±‡∏Å", "q_group": "Business & Strategy"},

        ],
        "Pain Points & Needs": [
            {"standard_question_th": "need ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (detail)", "q_group": "Pain Points & Needs"},
            
        ],
        "Product & Process": [
            {"standard_question_th": "‡∏õ‡∏π‡∏ô SCG ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô ‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Product & Process"},
            {"standard_question_th": "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏Ç‡∏≤‡∏¢", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ê‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏π‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Pre-Stressed", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô RMC", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Non-Prestressed", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏´‡∏•‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "q_group": "Product & Process"},
            {"standard_question_th": "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "q_group": "Product & Process"},

        ],        
    },
    "Bag transformer": {
        "Respondent Profile": [
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏û‡∏®", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏≠‡∏≤‡∏¢‡∏∏", "q_group": "Respondent Profile"},                        
            {"standard_question_th": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "q_group": "Respondent Profile"},
            {"standard_question_th": "Persona", "q_group": "Respondent Profile"},

        ],
        "Customer & Market": [
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", "q_group": "Customer & Market"},
        ],
        "Business & Strategy": [
            {"standard_question_th": "Dealer", "q_group": "Business & Strategy"},
            {"standard_question_th": "BP Model", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ú‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ú‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏•‡∏±‡∏Å", "q_group": "Business & Strategy"},
        ],
        "Pain Points & Needs": [
            {"standard_question_th": "need ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (detail)", "q_group": "Pain Points & Needs"},
            
        ],
        "Product & Process": [
            {"standard_question_th": "‡∏õ‡∏π‡∏ô SCG ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô ‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Product & Process"},
            {"standard_question_th": "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏Ç‡∏≤‡∏¢", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ê‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏π‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Prestressed", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô RMC", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Non-Prestressed", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏´‡∏•‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "q_group": "Product & Process"},
            {"standard_question_th": "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "q_group": "Product & Process"},
        ],        
    },
    "Subdealer & Bag transformer": {
        "Respondent Profile": [
            {"standard_question_th": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏û‡∏®", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏≠‡∏≤‡∏¢‡∏∏", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)", "q_group": "Respondent Profile"},
        ],
        "Customer & Market": [
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡∏ö‡∏¥‡∏•)", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏ó‡∏£‡∏™‡∏±‡πà‡∏á", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏±‡πà‡∏á", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Customer & Market"},
        ],
        "Business & Strategy": [
            {"standard_question_th": "Dealer", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏•‡∏≤‡∏î", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤", "q_group": "Business & Strategy"},
            {"standard_question_th": "Price Gap ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ü‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ó‡πâ‡∏õ‡∏π‡∏ô‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Business & Strategy"},
            {"standard_question_th": "Capacity ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (‡∏ï‡∏±‡∏ô)", "q_group": "Business & Strategy"},
            {"standard_question_th": "Capacity ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô (‡∏ï‡∏±‡∏ô)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏ú‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÇ‡∏£‡∏á‡∏´‡∏•‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Business & Strategy"},            
        ],
        "Pain Points & Needs": [
            {"standard_question_th": "need ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç pain ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (detail)", "q_group": "Pain Points & Needs"},
            
        ],
        "Product & Process": [
            {"standard_question_th": "‡∏õ‡∏π‡∏ô SCG ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÇ‡∏£‡∏á‡∏´‡∏•‡πà‡∏≠", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Product & Process"},
            {"standard_question_th": "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô ‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ê‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "q_group": "Product & Process"},            
        ],   
        "Product List": [
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Mortar-LW", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar-LW", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Grey-‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡πä‡∏¢‡∏°", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar-‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡πä‡∏¢‡∏°", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö‡∏ö‡∏≤‡∏á-Mortar-‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-RMC", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÄ‡∏™‡∏≤‡πÄ‡∏≠‡πá‡∏ô-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÄ‡∏™‡∏≤‡πÄ‡∏≠‡πá‡∏ô-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-RMC", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á-Mortar-TA", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á-Mortar-TG", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏°‡∏≠‡∏ç", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏ö‡∏•‡πá‡∏≠‡∏Å", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-CLC", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-Wall system", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏™‡∏µ-‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏™‡∏µ-‡∏™‡∏µ‡∏à‡∏£‡∏¥‡∏á", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-Water proof", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-Non shrink", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-White", "q_group": "Product & Details"},
        ],
        "Product & Details": [
            {"standard_question_th": "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏™‡∏ï‡πá‡∏≠‡∏Å", "q_group": "Product & Details"},
        ],
        "Special Topic": [
            {"standard_question_th": "Giant Banner", "q_group": "Special Topic"},
            {"standard_question_th": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏π‡∏ô", "q_group": "Special Topic"},
            {"standard_question_th": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ü‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÅ‡∏ó‡πâ‡∏õ‡∏π‡∏ô‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Special Topic"},
        ],
    },
    "Contractor": {
         "Respondent Profile": [
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏û‡∏®", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏≠‡∏≤‡∏¢‡∏∏", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏Å‡∏¥‡∏à‡∏ß‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "q_group": "Respondent Profile"},
            {"standard_question_th": "‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "q_group": "Respondent Profile"},
            {"standard_question_th": "lifestyle", "q_group": "Respondent Profile"},
        ],
        "Customer's Journey": [
            {"standard_question_th": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏™‡∏∑‡πà‡∏≠/‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏£‡πâ‡∏≤‡∏ô Modern Trade ‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏∏", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Modern Trade", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏õ‡∏π‡∏ô", "q_group": "Customer's Journey"},
            {"standard_question_th": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ü‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÅ‡∏ó‡πâ‡∏õ‡∏π‡∏ô‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Customer's Journey"},
        ],
        "Customer & Market": [
            {"standard_question_th": "‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å", "q_group": "Customer & Market"},
            {"standard_question_th": "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏π‡∏ô‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Customer & Market"},
            {"standard_question_th": "%‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "q_group": "Customer & Market"},
            {"standard_question_th": "%‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏•‡∏ô‡πå", "q_group": "Customer & Market"},
            {"standard_question_th": "%‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î, ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï, ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï)", "q_group": "Customer & Market"},
            {"standard_question_th": "‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ö‡∏¥‡∏•)", "q_group": "Customer & Market"},            
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà SCG ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ", "q_group": "Customer & Market"},
        ],
        "Business & Strategy": [
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏†‡∏≤‡∏Ñ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Business & Strategy"},            
            {"standard_question_th": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏π‡∏ô ‡πÄ‡∏™‡∏∑‡∏≠/SCG", "q_group": "Business & Strategy"},            
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏õ‡∏π‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Business & Strategy"},
            {"standard_question_th": "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô", "q_group": "Business & Strategy"},
        ],
        "Pain Points & Needs": [
            {"standard_question_th": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≤‡∏á", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏û‡∏±‡∏í‡∏ô‡∏≤", "q_group": "Pain Points & Needs"},
            {"standard_question_th": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ SCG ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "q_group": "Pain Points & Needs"},                        
        ],
        "Product & Process": [
            {"standard_question_th": "‡∏õ‡∏π‡∏ô‡πÄ‡∏™‡∏∑‡∏≠/SCG ‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ ‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏õ‡∏π‡∏ô", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏õ‡∏π‡∏ô", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ scg ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "q_group": "Product & Process"},
            {"standard_question_th": "‡∏õ‡∏π‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ scg ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ", "q_group": "Product & Process"},            
        ],
        # Contractor ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ cross-product ‡∏Å‡πá‡πÑ‡∏î‡πâ ‚Äî ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡∏•‡∏ö‡∏™‡∏≠‡∏á‡∏ä‡∏µ‡∏ï‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
        "Product List": [
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏Å‡πà‡∏≠-Mortar-LW", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar-LW", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Grey-‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡πä‡∏¢‡∏°", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö-Mortar-‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡πä‡∏¢‡∏°", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏â‡∏≤‡∏ö‡∏ö‡∏≤‡∏á-Mortar-‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á-RMC", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÄ‡∏™‡∏≤‡πÄ‡∏≠‡πá‡∏ô-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡πÄ‡∏™‡∏≤‡πÄ‡∏≠‡πá‡∏ô-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-Grey", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-Mortar", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô-RMC", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á-Mortar-TA", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á-Mortar-TG", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏°‡∏≠‡∏ç", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏ö‡∏•‡πá‡∏≠‡∏Å", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-CLC", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏ú‡∏ô‡∏±‡∏á-Wall system", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏™‡∏µ-‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏™‡∏µ-‡∏™‡∏µ‡∏à‡∏£‡∏¥‡∏á", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-Water proof", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-Non shrink", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ-White", "q_group": "Product & Details"},
        ],
        "Product & Details": [
            {"standard_question_th": "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?", "q_group": "Product & Details"},
            {"standard_question_th": "‡πÉ‡∏Ñ‡∏£ Spec/ ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡∏ñ‡∏∏‡∏á)", "q_group": "Product & Details"},
            {"standard_question_th": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "q_group": "Product & Details"},
        ],
    },
}

BUSINESS_TYPES = list(QUESTION_BANK.keys())
st.markdown("""<style>.heading-lg{ font-size:1.25rem; font-weight:700; margin:8px 0 4px; }</style>""", unsafe_allow_html=True)
# üß≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Business Type ‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå)
# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà (‡∏à‡∏∞‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤ markdown ‡∏õ‡∏Å‡∏ï‡∏¥)
st.subheader("üè∑Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUSINESS TYPE ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°")

try:
    # ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Streamlit
    biz = st.selectbox(
        "",
        options=list(QUESTION_BANK.keys()),
        index=None,
        placeholder="‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUSINESS_TYPE ‚Äî",
        label_visibility="collapsed",
    )
except TypeError:
    # ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤: ‡∏ó‡∏≥ placeholder ‡πÄ‡∏≠‡∏á
    PLACEHOLDER = "‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUSINESS_TYPE ‚Äî"
    biz = st.selectbox(
        "",
        options=[PLACEHOLDER] + list(QUESTION_BANK.keys()),
        index=0,
        label_visibility="collapsed",
    )
    if biz == PLACEHOLDER:
        st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUSINESS TYPE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        st.stop()

# ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô None
if not biz:
    st.info("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å BUSINESS TYPE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    st.stop()


# üìö ‡πÅ‡∏õ‡∏•‡∏á QUESTION_BANK -> sheets_data (‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏î‡∏¥‡∏°)
PRODUCT_SHEETS = {"Product List", "Product & Details"}

def build_sheets_data_from_bank(bank_for_biz: dict) -> dict:
    sheets = {}
    for sheet_name, rows in (bank_for_biz or {}).items():
        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        if rows is None or (isinstance(rows, list) and len(rows) == 0):
            continue

        df = pd.DataFrame(rows)

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô list[str] ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ 0 ‡∏°‡∏≤ -> ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å
        if "standard_question_th" not in df.columns:
            if 0 in df.columns:  # ‡πÄ‡∏Ñ‡∏™ list[str]
                df = pd.DataFrame({"standard_question_th": df[0].astype(str).str.strip()})
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏¢‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
                if df.empty:
                    continue
                raise ValueError(f"{sheet_name}: missing 'standard_question_th'")

        if "q_group" not in df.columns:
            df["q_group"] = "Product & Details" if sheet_name in PRODUCT_SHEETS else sheet_name

        df = df[["standard_question_th", "q_group"]].copy()
        df["standard_question_th"] = df["standard_question_th"].astype(str).str.strip()
        df["q_group"] = df["q_group"].astype(str).str.strip()

        # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á
        df = df[df["standard_question_th"] != ""]
        if not df.empty:
            sheets[sheet_name] = df

    return sheets


sheets_data = build_sheets_data_from_bank(QUESTION_BANK.get(biz, {}))


# ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ cross-product ‡πÑ‡∏´‡∏°
is_cross = "Product List" in sheets_data and "Product & Details" in sheets_data

# =========================
#   UI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏Ñ‡πà‡∏≠‡∏¢ Product)
# =========================

st.subheader("üìå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
selected_questions = []
# ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)
ORDER_STANDARD_GROUPS = [
    "Respondent Profile",
    "Customer's Journey",
    "Customer & Market",
    "Business & Strategy",
    "Pain Points & Needs",
    "Product & Process",
    "Special Topic",
]

# ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
for sheet_name in ORDER_STANDARD_GROUPS:
    if sheet_name in sheets_data and "standard_question_th" in sheets_data[sheet_name].columns:
        df = sheets_data[sheet_name]
        st.markdown(f"<h4 style='margin:6px 0;text-decoration:underline;'>üìë {sheet_name}</h4>", unsafe_allow_html=True)
        for i, row in df.iterrows():
            q = str(row["standard_question_th"])
            if pd.notna(q) and q.strip():
                if st.checkbox(q, key=f"{sheet_name}_{i}"):
                    qty = st.number_input(
                        f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {q[:30]}",
                        1, 20, 1, 1,
                        key=f"{sheet_name}_{i}_qty"
                    )
                    # group ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô N/A (‡∏¢‡∏±‡∏á‡∏°‡∏µ fuzzy ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ï‡∏≠‡∏ô export)
                    selected_questions.append({
                        "Question": q.strip(),
                        "Quantity": qty,
                        "Group": row.get("q_group", "N/A")
                    })

# ‚Äî‚Äî ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢ ‚Äú‡∏Å‡∏•‡∏∏‡πà‡∏° Product ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cross‚Äù ‚Äî‚Äî
selected_products, selected_details = [], []
if is_cross:
    st.subheader("üìë ‡∏Å‡∏•‡∏∏‡πà‡∏° Product List")

    # Product List ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    st.markdown("<div class='heading-lg' style='text-decoration: underline;'>üì¶ Product List</div>", unsafe_allow_html=True)
    prod_df = sheets_data["Product List"]

    # ‡πÉ‡∏´‡πâ 2 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    DEFAULT_SELECT_ALL_BIZ = {"Subdealer & Bag transformer", "Contractor"}
    default_select_all = (biz in DEFAULT_SELECT_ALL_BIZ)

    # ‡∏ó‡∏≥ prefix ‡πÉ‡∏´‡πâ key ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏° business type
    prod_prefix = f"prod_{biz.replace(' ', '_')}"

    # init ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á Product List (‡∏ï‡πà‡∏≠ business type)
    if st.session_state.get(f"{prod_prefix}_initialized") is None:
        st.session_state[f"{prod_prefix}_select_all"] = default_select_all
        st.session_state[f"{prod_prefix}_select_all_prev"] = default_select_all
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkbox ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö select_all ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
        for i in range(len(prod_df)):
            st.session_state[f"{prod_prefix}_{i}"] = default_select_all
        st.session_state[f"{prod_prefix}_initialized"] = True

    # ‡∏õ‡∏∏‡πà‡∏° Select All
    st.checkbox("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", key=f"{prod_prefix}_select_all")

    # ‡∏ñ‡πâ‡∏≤ select_all ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ ‚Üí sync ‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á
    if st.session_state[f"{prod_prefix}_select_all_prev"] != st.session_state[f"{prod_prefix}_select_all"]:
        new_val = st.session_state[f"{prod_prefix}_select_all"]
        for i in range(len(prod_df)):
            st.session_state[f"{prod_prefix}_{i}"] = new_val
        st.session_state[f"{prod_prefix}_select_all_prev"] = new_val

    # ‡∏ß‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    for i, row in prod_df.iterrows():
        q = str(row["standard_question_th"]).strip()
        if not q:
            continue
        checked = st.checkbox(q, key=f"{prod_prefix}_{i}")
        if checked:
            qty = st.number_input(
                f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {q}",
                min_value=1, max_value=20, value=1, step=1,
                key=f"{prod_prefix}_qty_{i}"
            )
            selected_products.append({"name": q, "qty": qty})
    

    # ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ Product & Details
    st.markdown("<div class='heading-lg' style='text-decoration: underline;'>üßæ Product & Details</div>", unsafe_allow_html=True)
    for i, row in sheets_data["Product & Details"].iterrows():
        q = str(row["standard_question_th"])
        if pd.notna(q) and q.strip():
            if st.checkbox(q, key=f"detail_{i}"):
                selected_details.append(q.strip())

    with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product Details)"):
        custom_detail = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="custom_detail_input")
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
            if custom_detail.strip():
                st.session_state.custom_product_details.append(custom_detail.strip())
                st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ \"{custom_detail.strip()}\" ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.info("‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")

# ‡πÄ‡∏ï‡∏¥‡∏° custom product details ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
selected_details += st.session_state.custom_product_details

# ‚úçÔ∏è Custom Questions (‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)
st.subheader("‚úçÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏≠‡∏á ")
with st.expander("‚úçÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏≠‡∏á ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"):
    custom_q = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°", key="custom_question_input")
    custom_q_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Column ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", 1, 20, 1, 1, key="custom_question_qty")
    custom_q_group = st.selectbox(
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î? (q_group)",
        options=[            
            "Respondent Profile",
            "Customer & Market",
            "Customer's Journey",
            "Business & Strategy",
            "Pain Points & Needs",
            "Product & Process",
            "Product & Details",
            "Special Topic"            
        ],
        index=1,
        key="custom_question_group"
    )
    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ"):
        if custom_q.strip():
            st.session_state.custom_questions.append({
                "Question": custom_q.strip(),
                "Quantity": custom_q_qty,
                "Group": custom_q_group
            })
            st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° \"{custom_q.strip()}\" ‡πÄ‡∏Ç‡πâ‡∏≤ group \"{custom_q_group}\" ‡πÅ‡∏•‡πâ‡∏ß!")
            st.info("‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")

# ‡∏£‡∏ß‡∏° custom ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
for item in st.session_state.custom_questions:
    selected_questions.append({
        "Question": item["Question"],
        "Quantity": item["Quantity"],
        "Group": item.get("Group", "N/A")
    })


# =========================
#   GENERATE EXPORT
# =========================
if st.button("üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel + PDF"):
    columns, qgroup_row, question_row, pdf_rows = [], [], [], []
    seen_labels.clear()

    # ‚úÖ Group questions (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á logic ‡πÄ‡∏î‡∏¥‡∏° + fuzzy ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    grouped_questions_by_group = {}
    unmatched_questions = []

    for q in selected_questions:
        base_q = q["Question"]
        # ‡∏ñ‡πâ‡∏≤ group ‡πÉ‡∏™‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà ‡∏Å‡πá‡πÉ‡∏ä‡πâ find_q_group ‡∏à‡∏≤‡∏Å sheets_data
        group = q.get("Group") if q.get("Group") not in [None, "", "N/A"] else find_q_group(base_q, sheets_data)
        item = {"question": base_q, "qty": q["Quantity"], "group": group}
        if group == "N/A":
            unmatched_questions.append(item)
        else:
            grouped_questions_by_group.setdefault(group, []).append(item)

    # ‚úÖ ‡∏•‡∏≥‡∏î‡∏±‡∏ö group ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    preferred_qgroup_order = [
        "BUSINESS_TYPE",
        "Respondent Profile",
        "Customer & Market",
        "Business & Strategy",
        "Pain Points & Needs",
        "Product & Process",
        "Product & Details",
        "Special Topic"
    ]

    already_handled = set()
    for group in preferred_qgroup_order:
        if group in grouped_questions_by_group:
            already_handled.add(group)
            for item in grouped_questions_by_group[group]:
                base_q, qty = item["question"], item["qty"]
                for i in range(1, qty + 1):
                    label = generate_unique_label(base_q, i, qty)
                    columns.append(label)
                    qgroup_row.append(group)
                    question_row.append(label)
                    pdf_rows.append([group, label, ""])

    for group in grouped_questions_by_group:
        if group not in already_handled and group != "N/A":
            for item in grouped_questions_by_group[group]:
                base_q, qty = item["question"], item["qty"]
                for i in range(1, qty + 1):
                    label = generate_unique_label(base_q, i, qty)
                    columns.append(label)
                    qgroup_row.append(group)
                    question_row.append(label)
                    pdf_rows.append([group, label, ""])

    for item in unmatched_questions:
        base_q, qty = item["question"], item["qty"]
        for i in range(1, qty + 1):
            label = generate_unique_label(base_q, i, qty)
            columns.append(label)
            qgroup_row.append("N/A")
            question_row.append(label)
            pdf_rows.append(["N/A", label, ""])

    # Cross product
    if is_cross and selected_products and selected_details:
        for prod in selected_products:
            for i in range(1, prod["qty"] + 1):
                for detail in selected_details:
                    label = generate_unique_label(f"{prod['name']}-{detail}", i, prod["qty"])
                    columns.append(label)
                    qgroup_row.append("Product & Details")
                    question_row.append(label)
                    pdf_rows.append(["Product & Details", label, ""])

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏´‡∏±‡∏ß 2 ‡πÅ‡∏ñ‡∏ß)
    header_df = pd.DataFrame([qgroup_row, question_row])
    empty = pd.DataFrame([[""] * len(columns) for _ in range(5)])
    final_df = pd.concat([header_df, empty], ignore_index=True)

    st.markdown("### üìì ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Excel)")
    st.dataframe(final_df.head(5))

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel + ‡πÉ‡∏™‡πà dropdown ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô/‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Product & Details
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏´‡∏±‡∏ß 2 ‡πÅ‡∏ñ‡∏ß + Blank rows)
        final_df.to_excel(writer, sheet_name="Survey Template", index=False)
        ws = writer.sheets["Survey Template"]
        wb = writer.book
        # =========================
        # 1) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° "‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Dict
        # =========================

        # ---- 1.1: ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á product ‡πÅ‡∏¢‡∏Å grey mortar rmc ta tg
        GREY_PRODUCTS = [
            "01.Tiger","02.Rhino","03.Super","04.Tiger Plastering","06.Precast","11.Elephant Hybrid","20.Durable",
            "Corner Bead Mortar","FSM","GPM","LMM","LPM","MAM","Mortar Easy",
            "TPI-TPI Loft M103  ‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏Ç‡∏±‡∏î‡∏°‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏™‡∏π‡∏ï‡∏£‡∏ú‡∏á ‡∏ú‡∏™‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            "TPI-TPI Loft Ready to used NP103 ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏â‡∏≤‡∏ö‡∏Ç‡∏±‡∏î‡∏°‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏™‡∏π‡∏ï‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ",
            "TPI-‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡πÅ‡∏´‡πâ‡∏á‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (Dry Crete)",
            "TPI-‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M680) (Water Plug Cement)",
            "TPI-‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡∏≠‡∏≠‡∏¢‡∏•‡πå ‡πÄ‡∏ß‡∏• ‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏Æ‡∏î‡∏£‡∏≠‡∏•‡∏¥‡∏Å ‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ 299",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏õ‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏ô‡∏î‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 1 ‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (‡∏™‡∏µ‡πÅ‡∏î‡∏á)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏õ‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏ô‡∏î‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 3 ‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (‡∏™‡∏µ‡∏î‡∏≥)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏õ‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏ô‡∏î‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 5 ‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (‡∏™‡∏µ‡∏ü‡πâ‡∏≤)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ú‡∏™‡∏° ‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ M197/M199",
            "TPI-‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡πÅ‡∏î‡∏á‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå",
            "TPI-‡∏õ‡∏π‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏ô‡∏Å‡∏£‡∏î (M250)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ (M220B) ‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏≠‡∏ö‡πÑ‡∏≠‡∏ô‡πâ‡∏≥",
            "Well Cement",
            "‡∏ö‡∏±‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß","‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á ‡πÇ‡∏õ‡∏£‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ","‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á ‡πÑ‡∏Æ‡πÄ‡∏ó‡∏Ñ","‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á ‡πÑ‡∏Æ‡πÄ‡∏ó‡∏Ñ ‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡∏ï‡∏£‡πâ‡∏≤","‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á ‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡πà‡∏≠",
            "‡∏ö‡∏±‡∏ß‡∏â‡∏•‡∏≤‡∏°","‡∏ö‡∏±‡∏ß‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå","‡∏ö‡∏±‡∏ß‡∏î‡∏≥","‡∏ö‡∏±‡∏ß‡∏û‡∏•‡∏±‡∏™","‡∏ö‡∏±‡∏ß‡∏ü‡πâ‡∏≤",
            "‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ","‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤","‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ","‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤",
            "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ ‡πÑ‡∏û‡∏£‡πå‡πÄ‡∏°‡∏≠‡∏£‡πå","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ ‡∏•‡∏≤‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£ CPM","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£ Easy Flow","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£ Quick Cast",
            "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£ ‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÄ‡∏û‡∏ä‡∏£‡∏û‡∏•‡∏±‡∏™","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡πÅ‡∏î‡∏á","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå",
            "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏î‡∏≥ High Early Strength","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏î‡∏≥‚Äã","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏î‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡πà‡∏≠","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏ó‡∏≠‡∏á","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏õ‡∏π‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß","‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏û‡πà‡∏ô"
            
        ]
        MORTAR_PRODUCTS = [
            'Corner Bead Mortar-‡∏õ‡∏π‡∏ô‡∏à‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡πä‡∏¢‡∏°',' FSM-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô','GPM-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏â‡∏≤‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            'LMM-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏Å‡πà‡∏≠‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤','LPM-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏â‡∏≤‡∏ö‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤',
            'MAM-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            'Mortar Easy-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏Å‡πà‡∏≠‡πÄ‡∏ó',
            'Dry concrete-‡πÄ‡∏™‡∏∑‡∏≠‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡πÅ‡∏´‡πâ‡∏á 240 KSC',
            'TPI-TPI Loft ‚Äì M103  ‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏Ç‡∏±‡∏î‡∏°‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏™‡∏π‡∏ï‡∏£‡∏ú‡∏á ‡∏ú‡∏™‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
            'TPI-‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M680) (Water Plug Cement)',
            'TPI-‡∏õ‡∏π‡∏ô‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏´‡∏•‡∏ï‡∏±‡∏ß‡∏î‡∏µ Semi-Self  M410',
            'TPI-‡∏õ‡∏π‡∏ô‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M400)',
            'TPI-‡∏õ‡∏π‡∏ô‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M409)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏Å‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠',
            'TPI-‡∏õ‡∏π‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠',
            'TPI-‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M210)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏ú‡∏¥‡∏ß‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M100C)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M100)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M200)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ M197/M199',
            'TPI-‡∏õ‡∏π‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏ô‡∏Å‡∏£‡∏î (M250)',
            'TPI-‡∏õ‡∏π‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ (M220B) ‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏≠‡∏ö‡πÑ‡∏≠‡∏ô‡πâ‡∏≥',
            'TPI-‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡πÅ‡∏´‡πâ‡∏á 240 KSC Cylinder (M402)',
            '‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            '‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤',
            '‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            '‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏≠‡∏¥‡∏ê‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 11',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 12',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏â‡∏≤‡∏ö‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ 13',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 21',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡πà‡∏≠‡∏°‡∏ß‡∏•‡πÄ‡∏ö‡∏≤ 23',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡πÄ‡∏ó‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô 31',
            '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå 52 ‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡πÅ‡∏´‡πâ‡∏á 240 KSC'

        ]

        SKIM_PRODUCTS = [
            "Mass Grey skim coat","Mass White skim coat",
            "‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏ö‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡∏á‡∏ú‡∏¥‡∏ß ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß","‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏ö‡∏≤‡∏á ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏ú‡∏¥‡∏ß ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤",
            "‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡∏ú‡∏¥‡∏ß‡πÅ‡∏Å‡∏£‡πà‡∏á M651 (SUPER SKIM COAT HARDENING)",
            "‡∏•‡∏π‡∏Å‡∏î‡∏¥‡πà‡∏á ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó (‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß)","‡∏•‡∏π‡∏Å‡∏î‡∏¥‡πà‡∏á ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó (‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô)","‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏™‡∏°‡∏π‡∏ó",
            "‡∏•‡∏π‡∏Å‡∏î‡∏¥‡πà‡∏á ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó (‡∏™‡∏µ‡πÄ‡∏ó‡∏≤)","‡∏•‡∏π‡∏Å‡∏î‡∏¥‡πà‡∏á ‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó  (‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß)",
            "‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ 110 ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏™‡∏°‡∏π‡∏ó ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß","‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ 110 ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏™‡∏°‡∏π‡∏ó ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡πÄ‡∏ó‡∏≤",
            "‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‚Äã","‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡πÄ‡∏ó‡∏≤","‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡∏™‡∏°‡∏π‡∏ó ‡πÄ‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå",
            "LANKO ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó 110 ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤","‡∏õ‡∏π‡∏ô‡∏â‡∏≤‡∏ö‡∏ú‡∏¥‡∏ß‡∏ö‡∏≤‡∏á Skim Coat TPI (M650F)",
            "‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó ‡πÅ‡∏ã‡∏ô‡∏î‡πå ‡πÄ‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå","LANKO ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó 110 ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß","‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó 102","‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó 102 ‡πÄ‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå"
        ]

        RMC_PRODUCTS = ['‡∏£‡∏ñ‡πÇ‡∏°‡πà CPAC 210','‡∏£‡∏ñ‡πÇ‡∏°‡πà CPAC 240', '‡∏£‡∏ñ‡πÇ‡∏°‡πà CPAC 280', '‡∏£‡∏ñ‡πÇ‡∏°‡πà CPAC 300',
                        '‡∏£‡∏ñ‡πÇ‡∏°‡πà CPAC 320','‡∏£‡∏ñ‡πÇ‡∏°‡πà SCG 210','‡∏£‡∏ñ‡πÇ‡∏°‡πà SCG 240','‡∏£‡∏ñ‡πÇ‡∏°‡πà SCG 280','‡∏£‡∏ñ‡πÇ‡∏°‡πà SCG 300',
                        '‡∏£‡∏ñ‡πÇ‡∏°‡πà SCG 320','‡∏£‡∏ñ‡πÇ‡∏°‡πà ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå 210','‡∏£‡∏ñ‡πÇ‡∏°‡πà ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå 240','‡∏£‡∏ñ‡πÇ‡∏°‡πà ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå 280','‡∏£‡∏ñ‡πÇ‡∏°‡πà ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå 300',
                        '‡∏£‡∏ñ‡πÇ‡∏°‡πà ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå 320','‡∏£‡∏ñ‡πÇ‡∏°‡πà TPI 210','‡∏£‡∏ñ‡πÇ‡∏°‡πà TPI 240','‡∏£‡∏ñ‡πÇ‡∏°‡πà TPI 280','‡∏£‡∏ñ‡πÇ‡∏°‡πà TPI 300','‡∏£‡∏ñ‡πÇ‡∏°‡πà TPI 320'
            ]

        TA_PRODUCTS = [
            "Tile Adhesive Blue","Tile Adhesive Gold","Tile Adhesive Green","Tile Adhesive Orange","Tile Adhesive Pink",
            "COTTO TA","‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏ã‡∏¥‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå",
            "‡∏ö‡∏±‡∏ß‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå ‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ","TPI-‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M500)",
            "TPI-‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏£‡∏á‡∏¢‡∏∂‡∏î‡πÄ‡∏Å‡∏≤‡∏∞‡∏™‡∏π‡∏á ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ (M501)",
            "TPI-‡∏õ‡∏π‡∏ô‡∏Å‡∏≤‡∏ß‡∏ï‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ (M503)",
            "TPI-‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© (M509)","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡πÑ‡∏ó‡∏•‡πå","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡∏ó‡∏µ‡∏ó‡∏µ‡∏ö‡∏µ‡∏û‡∏•‡∏±‡∏™",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏ó‡∏µ‡∏ó‡∏µ‡∏ö‡∏µ","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡πÅ‡∏Å‡∏£‡∏ô‡∏¥‡πÇ‡∏ï‡πâ ‡∏û‡∏•‡∏±‡∏™","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡∏û‡∏π‡∏•",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏ó‡∏≠‡∏á","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ó‡∏•‡πå","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏™‡πÇ‡∏ï‡∏ô‡πÄ‡∏°‡∏ó",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏ü‡πâ‡∏≤","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≤‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÅ‡∏î‡∏á","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏û‡∏£‡∏™",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏≠‡∏µ‡πÇ‡∏Ñ‡πÑ‡∏ó‡∏•‡πå","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏Å‡∏£‡∏¢‡πå‡∏™‡πÇ‡∏ï‡∏ô‡πÄ‡∏°‡∏ó","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ó‡∏µ‡πÇ‡∏≠‡πÄ‡∏≠ ‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡∏ï‡∏£‡∏µ‡∏°","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≤‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏ó‡∏≠‡∏á","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏á‡∏¥‡∏ô","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≤‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏á‡∏¥‡∏ô",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÅ‡∏î‡∏á","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡πÄ‡∏ü‡∏•‡πá‡∏Å‡∏ã‡πå","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡πÄ‡∏≠‡∏ã‡∏µ-2",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡πÄ‡∏Å‡∏£‡∏™","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡∏ß‡∏¥‡∏™","‡∏Å‡∏≤‡∏ß‡∏õ‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏ó‡∏π‡∏ü‡∏¥‡∏Å‡∏ã‡πå",
            "‡∏Å‡∏≤‡∏ß‡∏õ‡∏π‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏≠‡∏µ‡∏û‡πá‡∏≠‡∏Å‡∏ã‡∏µ‡πà ‡∏û‡∏•‡∏±‡∏™","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡πÇ‡∏ï‡∏ô ‡∏ü‡∏¥‡∏Å‡∏ã‡πå","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡∏ü‡∏¥‡∏Å‡∏ã‡πå",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏ó‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°)",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå 2-‡∏≠‡∏¥‡∏ô-1","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡πÄ‡∏ã‡πá‡∏°","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏•‡πå ‡πÇ‡∏ô‡∏™‡πÄ‡∏ï‡∏ô",
            "‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏ä‡∏≤‡∏•‡∏∞‡∏ß‡∏±‡∏ô","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ‡∏ó‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏™‡∏Å‡πÅ‡∏Å‡πâ‡∏ß ‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏ß)","‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏ü‡πÇ‡∏Å‡πâ ‡∏≠‡∏±‡∏•‡∏ï‡∏£‡πâ‡∏≤‡πÄ‡∏ü‡∏•‡πá‡∏Å‡∏ã‡πå"
        ]

        TG_PRODUCTS = [
            "Tile Grout","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ ‡∏Å‡∏≤‡∏£‡πå‡∏î","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ ‡πÇ‡∏Å",
            "TPI-‡∏õ‡∏π‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ Non-Shrink Grout ‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏´‡∏î‡∏ï‡∏±‡∏ß (M670)",
            "TPI-‡∏õ‡∏π‡∏ô‡πÄ‡∏ó‡πÑ‡∏°‡πà‡∏´‡∏î‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ General Purpose Non-Shrink Grout M671",
            "TPI-‡∏õ‡∏π‡∏ô‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß (Cement-Base Tile Grout) M550","TPI-‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ M552",
            "TPI-‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏ó‡∏µ‡∏û‡∏µ‡πÑ‡∏≠ ‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå ‡∏û‡∏•‡∏±‡∏™  M551","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏Å‡πâ‡∏ß","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡πÅ‡∏û‡∏•‡∏ó‡∏¥‡∏ô‡∏±‡∏°",
            "‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏ö ‡∏û‡∏•‡∏±‡∏™","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏° ‡∏û‡∏•‡∏±‡∏™ ‡∏ó‡∏≠‡∏á","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏° ‡∏û‡∏•‡∏±‡∏™ ‡πÄ‡∏á‡∏¥‡∏ô",
            "‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡πÄ‡∏ß‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ñ‡∏±‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå ‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå","‡∏Å‡∏≤‡∏ß‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß ‡∏ä‡∏≤‡∏•‡∏∞‡∏ß‡∏±‡∏ô","‡∏Å‡∏≤‡∏ß‡∏õ‡∏π‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á ‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ ‡∏≠‡∏µ‡∏û‡πá‡∏≠‡∏Å‡∏ã‡∏µ‡πà ‡∏û‡∏•‡∏±‡∏™"
        ]

        PAINT_PRODUCTS = ["TOA","Beger","Nippon paint","Jotun","JBP","Dulux","Krystal"]

        # ---- 1.4: ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ï Dict ----
        DICT_DATA = {
            "GREY":   GREY_PRODUCTS,
            "MORTAR": MORTAR_PRODUCTS,
            "SKIM":   SKIM_PRODUCTS,
            "TA":     TA_PRODUCTS,
            "TG":     TG_PRODUCTS,
            "RMC":    RMC_PRODUCTS,
            "PAINT":  PAINT_PRODUCTS,
        }

        dict_ws = wb.create_sheet("Dict")

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        for ci, cat in enumerate(DICT_DATA.keys(), start=1):
            dict_ws.cell(row=1, column=ci, value=cat)

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        max_len = 0
        for ci, cat in enumerate(DICT_DATA.keys(), start=1):
            items = DICT_DATA[cat]
            for ri, name in enumerate(items, start=2):
                dict_ws.cell(row=ri, column=ci, value=name)
            max_len = max(max_len, len(items))
        dict_ws.sheet_state = "visible"

        # =========================
        # 2) ‡πÉ‡∏™‡πà Data Validation (‡∏≠‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï Dict)
        # =========================
        from openpyxl.utils import get_column_letter
        from openpyxl.worksheet.datavalidation import DataValidation
        from openpyxl.workbook.defined_name import DefinedName

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö openpyxl ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
        def delete_named_range(wb, name: str):
            dn = wb.defined_names
            if hasattr(dn, "delete"):
                try: dn.delete(name)
                except Exception: pass
            else:
                try: dn.pop(name, None)
                except Exception:
                    try: del dn[name]
                    except Exception: pass

        def add_named_range(wb, name: str, ref: str):
            obj = DefinedName(name=name, attr_text=ref)  # workbook-scope
            dn = wb.defined_names
            if hasattr(dn, "add"):
                dn.add(obj)
            elif hasattr(dn, "append"):
                dn.append(obj)
            else:
                dn[name] = obj

        # 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á Named Range ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° (LIST_GREY, LIST_MORTAR, ...), map ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        range_name_map = {}
        for ci, cat in enumerate(DICT_DATA.keys(), start=1):
            items = DICT_DATA[cat]
            if not items:  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                continue
            col_letter = get_column_letter(ci)
            end_row = len(items) + 1  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß 2 ‚Üí ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ = 1 + len
            nm = f"LIST_{cat}"        # ‡πÄ‡∏ä‡πà‡∏ô LIST_GREY
            delete_named_range(wb, nm)
            # ‡πÉ‡∏™‡πà quote ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï ‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏Å/‡∏°‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
            ref = f"'{dict_ws.title}'!${col_letter}$2:${col_letter}${end_row}"
            add_named_range(wb, nm, ref)
            range_name_map[cat] = nm

        # 2) ‡∏ï‡∏¥‡∏î DV "‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå" (‡πÑ‡∏°‡πà reuse ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°) + ‡πÄ‡∏õ‡∏¥‡∏î in-cell dropdown
        BRAND_KEYS = ("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô", "‡∏£‡∏∏‡πà‡∏ô", "‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå")
        HEADER_ROW = 3
        DATA_START_ROW = HEADER_ROW + 1  # = 4
        DATA_END_ROW = 100               # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

        def category_of_product(label: str) -> str | None:
            s = str(label).lower()
            if any(k in s for k in ["‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß", " tile grout", "-tg", "mortar-tg", " tg-"]): return "TG"
            if any(k in s for k in ["‡∏Å‡∏≤‡∏ß‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå", "tile adhesive", "-ta", "mortar-ta", " ta-"]): return "TA"
            if "skim" in s or "‡∏™‡∏Å‡∏¥‡∏°" in s or "mortar-‡∏™‡∏Å‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏ó" in s: return "SKIM"
            if "paint" in s or "‡∏™‡∏µ-" in s or s.startswith("‡∏™‡∏µ-"): return "PAINT"
            if any(k in s for k in ["rmc", "ready mix", "ready-mix", "‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à"]): return "RMC"
            if any(k in s for k in ["mortar", "‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå", "mortar-lw", "-lw", "lightweight"]): return "MORTAR"
            if any(k in s for k in ["grey", "‡πÄ‡∏Å‡∏£‡∏¢‡πå", "‡∏õ‡∏π‡∏ô‡∏ú‡∏á", "cement"]): return "GREY"
            return None

        max_col = ws.max_column
        for col_idx in range(1, max_col + 1):
            header_text = ws.cell(row=HEADER_ROW, column=col_idx).value
            if not header_text:
                continue
            if not any(k in str(header_text) for k in BRAND_KEYS):
                continue

            group = category_of_product(header_text)
            if group is None or group not in range_name_map:
                continue

            col_letter = get_column_letter(col_idx)
            cell_range = f"{col_letter}{DATA_START_ROW}:{col_letter}{DATA_END_ROW}"

            # ‚úÖ In-cell dropdown ‡∏ï‡∏¥‡πâ‡∏Å‡πÑ‡∏ß‡πâ + allow blank + ‡πÑ‡∏°‡πà‡πÄ‡∏î‡πâ‡∏á error
            formula = f"={range_name_map[group]}"  # ‡πÄ‡∏ä‡πà‡∏ô =LIST_GREY
            dv = DataValidation(type="list", formula1=formula, allow_blank=True)
            dv.showDropDown = False
            dv.allow_blank = True
            dv.showErrorMessage = False

            ws.add_data_validation(dv)
            dv.add(cell_range)

    # ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô writer; ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≠‡∏Å with ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á buffer ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    # writer.save()  # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô context manager

    st.download_button("üîΩÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", data=excel_buffer.getvalue(),
                       file_name="survey_template.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")



    # ‚úÖ Preview PDF (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
    st.markdown("### üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (PDF)")
    st.dataframe(pd.DataFrame(pdf_rows[:5], columns=["Group", "Question", "Answer"]))

    # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏≠‡∏ô‡∏ï‡πå)
    font_path = os.path.join("font", "THSarabun.ttf")
    if os.path.exists(font_path):
        pdfmetrics.registerFont(TTFont("THSarabun", font_path))
        font_name = "THSarabun"
        font_size = 14
    else:
        font_name = "Helvetica"
        font_size = 10
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå THSarabun.ttf ‚Äî ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Helvetica ‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô PDF")

    table_data = [["Group", "Question", "Answer"]] + pdf_rows
    row_heights = [25] + [60] * len(pdf_rows)

    pdf_buffer = BytesIO()
    doc = SimpleDocTemplate(pdf_buffer, pagesize=landscape(A4))
    table = Table(table_data, colWidths=[120, 280, 320], rowHeights=row_heights, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
        ("ALIGN", (0, 0), (-1, -1), "LEFT"),
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("FONTNAME", (0, 0), (-1, -1), font_name),
        ("FONTSIZE", (0, 0), (-1, -1), font_size),
        ("BOTTOMPADDING", (0, 0), (-1, 0), 12),
        ("GRID", (0, 0), (-1, -1), 1, colors.black),
    ]))
    doc.build([table])

    st.download_button("üîΩÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", data=pdf_buffer.getvalue(),
                       file_name="survey_questions_structured.pdf",
                       mime="application/pdf")

    # ‚úÖ Excel ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡πÅ‡∏ö‡∏ö PDF) + ‡∏•‡∏≥‡∏î‡∏±‡∏ö
    df_vertical = pd.DataFrame(pdf_rows, columns=["Group", "Question", "Answer"])
    df_vertical.index += 1  # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
    df_vertical.reset_index(inplace=True)
    df_vertical.rename(columns={"index": "No."}, inplace=True)

    excel_vertical_buffer = BytesIO()
    with pd.ExcelWriter(excel_vertical_buffer, engine="openpyxl") as writer:
        df_vertical.to_excel(writer, sheet_name="Survey Vertical", index=False)

    st.download_button(
        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á + ‡∏•‡∏≥‡∏î‡∏±‡∏ö)",
        data=excel_vertical_buffer.getvalue(),
        file_name="survey_template_vertical.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # ‚úÖ Preview Excel ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Streamlit
    st.markdown("### üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Excel ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)")
    st.dataframe(df_vertical.head(10))

   # ‚úÖ Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets (‡∏´‡∏±‡∏ß 1 ‡πÅ‡∏ñ‡∏ß, ‡∏™‡∏∞‡∏≠‡∏≤‡∏î, import ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    gs_buffer = BytesIO()

    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô 'columns'
    gs_df = pd.DataFrame(columns=columns)

    with pd.ExcelWriter(gs_buffer, engine="openpyxl") as writer:
        # Sheet 1: Responses (‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Google Sheets)
        gs_df.to_excel(writer, sheet_name="Responses", index=False)
        ws = writer.sheets["Responses"]
        ws.freeze_panes = "A2"  # freeze ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á

        # Sheet 2: DataDictionary (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏ß‡πâ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô AppSheet/‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
        dict_df = pd.DataFrame({
            "column_name": columns,
            "q_group": qgroup_row,
            "question_text": question_row,
        })
        dict_df.to_excel(writer, sheet_name="DataDictionary", index=False)

    st.download_button(
        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Google Sheets)",
        data=gs_buffer.getvalue(),
        file_name="survey_google_sheets.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )





